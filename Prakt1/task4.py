"""
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ–Ω—Ü–∞ –æ—Ç—Ä–µ–∑–∫–∞
ùêø =[[0, 100],
    [200, 300]]
–ø–æ –º–∞—Ç—Ä–∏—Ü–µ:
ùëá = [[1, 2],
     [3, 1]]
–ù–∞–π–¥–∏—Ç–µ —Å–µ—Ä–µ–¥–∏–Ω—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ–±–∞
–æ—Ç—Ä–µ–∑–∫–∞ —Å –ø–æ–º–æ—â—å—é pygame. –û–±–æ–∑–Ω–∞—á—å—Ç–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –æ—Ç—Ä–µ–∑–∫–æ–≤ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫—Ä—É–≥–∞–º–∏ –∏
—Å–æ–µ–¥–∏–Ω–∏—Ç–µ –∏—Ö –µ—â—ë –æ–¥–Ω–∏–º –æ—Ç—Ä–µ–∑–∫–æ–º.
"""

import numpy as np
import pygame
import sys


def transform_segment(segment, transformation_matrix):
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ –æ–±–æ–∏–º –∫–æ–Ω—Ü–∞–º –æ—Ç—Ä–µ–∑–∫–∞
    new_start = transformation_matrix @ segment[0]
    new_end = transformation_matrix @ segment[1]
    return new_start, new_end


def find_midpoint(p1, p2):
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –æ—Ç—Ä–µ–∑–∫–∞
    return (p1 + p2) / 2


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
    pygame.init()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
    width, height = 1000, 800
    screen = pygame.display.set_mode((width, height))
    pygame.display.set_caption("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç—Ä–µ–∑–∫–∞")

    # –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫
    L = np.array([[0, 100], [200, 300]])

    # –ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è T
    T = np.array([[1, 2],
                  [3, 1]])

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç—Ä–µ–∑–∫–∞
    new_L_start, new_L_end = transform_segment(L, T)

    # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–µ–¥–∏–Ω
    midpoint_original = find_midpoint(L[0], L[1])
    midpoint_transformed = find_midpoint(new_L_start, new_L_end)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Pygame
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
        screen.fill((255, 255, 255))

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ (–∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç)
        pygame.draw.line(screen, (255, 0, 0), (int(L[0][0] + width // 2), height // 2 - int(L[0][1])),
                         (int(L[1][0] + width // 2), height // 2 - int(L[1][1])), 5)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ (—Å–∏–Ω–∏–π —Ü–≤–µ—Ç)
        pygame.draw.line(screen, (0, 0, 255), (int(new_L_start[0] + width // 2), height // 2 - int(new_L_start[1])),
                         (int(new_L_end[0] + width // 2), height // 2 - int(new_L_end[1])), 5)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ä–µ–¥–∏–Ω (—á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç)
        pygame.draw.circle(screen, (0, 0, 0),
                           (int(midpoint_original[0] + width // 2), height // 2 - int(midpoint_original[1])), 5)
        pygame.draw.circle(screen, (0, 0, 0),
                           (int(midpoint_transformed[0] + width // 2), height // 2 - int(midpoint_transformed[1])), 5)

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ—Ä–µ–¥–∏–Ω –æ—Ç—Ä–µ–∑–∫–∞ (–∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç)
        pygame.draw.line(screen, (0, 255, 0),
                         (int(midpoint_original[0] + width // 2), height // 2 - int(midpoint_original[1])),
                         (int(midpoint_transformed[0] + width // 2), height // 2 - int(midpoint_transformed[1])), 2)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–µ–π
        pygame.draw.line(screen, (0, 0, 0), (0, height // 2), (width, height // 2), 2)  # –û—Å—å X
        pygame.draw.line(screen, (0, 0, 0), (width // 2, 0), (width // 2, height), 2)  # –û—Å—å Y

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        pygame.display.flip()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Pygame
    pygame.quit()
    sys.exit()


if __name__ == "__main__":
    main()